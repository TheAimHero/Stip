generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  MOD
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  todos         Todo[]
  role          Role       @default(USER)
  groupId       String?
  taskId        String?
  userTasks     UserTask[]
  Group         Group?     @relation(fields: [groupId], references: [id])
  Task          Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  note        String   @db.LongText
  createdAt   DateTime
  dueDate     DateTime
  completed   Boolean
  user        User     @relation(fields: [userId], references: [id])
}

model Group {
  id    String @id @default(cuid())
  name  String @unique
  Users User[]
  Task  Task[]
}

enum State {
  DELETED
  OPEN
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String
  dueDate      DateTime
  groupId      String
  createdAt    DateTime
  UserTask     UserTask[]
  assignedById String
  assignedBy   User       @relation(fields: [assignedById], references: [id])
  state        State      @default(OPEN)
  Group        Group      @relation(fields: [groupId], references: [id])
}

model UserTask {
  userId      String
  taskId      String
  completed   Boolean
  completedAt DateTime?
  User        User      @relation(fields: [userId], references: [id])
  Task        Task      @relation(fields: [taskId], references: [id])
  cancelledAt DateTime?
  cancelled   Boolean   @default(false)

  @@id([userId, taskId])
  @@unique([userId, taskId])
}
